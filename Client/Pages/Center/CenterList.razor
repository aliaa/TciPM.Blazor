@page "/"
@page "/center/list"
@attribute [Authorize(nameof(Permission.ShowCenters))]
@inject HttpClientX http

@if (cities == null)
{
    <Loading />
}
else
{
    <div class="form-inline justify-content-center">
        <div class="m-3 form-group">
            <span class="m-2">شهر:</span>
            <select class="form-control" @onchange="CityChanged">
                @if (cities != null)
                {
                    foreach (var c in cities)
                    {
                        <option value="@c.Value">@c.Text</option>
                    }
                }
            </select>
        </div>
        <div>
            <a class="btn btn-secondary" href="/center/new">تعریف مرکز جدید</a>
        </div>
    </div>
    if (centers != null && !loading)
    {
        <div class="mt-4">
            <ObjectTable Data="centers" FieldNames="fields" LinkColumns="linkColumns" ColumnsBackColor="pmDaysColor" />
        </div>
    }
    if (loading)
    {
        <Loading />
    }
}

@code {
    private List<TextValue> cities;
    private CommCenterWithReports[] centers;
    private bool loading = true;
    private static string[] fields = new string[]
    {
        nameof(CommCenterWithReports.CityName),
        nameof(CommCenterWithReports.Name),
        nameof(CommCenterWithReports.ElapsedDaysOfLastPm),
        nameof(CommCenterWithReports.ImportanceLevel),
        nameof(CommCenterWithReports.CenterCapacity),
        nameof(CommCenterWithReports.NotesCount),
        nameof(CommCenterWithReports.EquipmentsPmEnabled),
        nameof(CommCenterWithReports.DailyPmEnabled),
        nameof(CommCenterWithReports.SwitchType),
        nameof(CommCenterWithReports.DieselsCount),
        nameof(CommCenterWithReports.BatteryAndRectifiersCount),
        nameof(CommCenterWithReports.UpsCount),
    };

    private static ObjectTable<CommCenterWithReports>.LinkColumn[] linkColumns = new ObjectTable<CommCenterWithReports>.LinkColumn[]
    {
        new ObjectTable<CommCenterWithReports>.LinkColumn { Text = "جزئیات", FieldName = nameof(CommCenterWithReports.Id), Link = @"/center/item/{Id}" },
        new ObjectTable<CommCenterWithReports>.LinkColumn { Text = "ویرایش", FieldName = nameof(CommCenterWithReports.Id), Link = @"/center/edit/{Id}" }
    };

    private Dictionary<string, List<string>> pmDaysColor;

    protected override async Task OnInitializedAsync()
    {
        cities = await http.GetFromJsonAsync<List<TextValue>>("Place/CityList");
        await CityChanged(new ChangeEventArgs { Value = cities[0].Value });
    }

    private async Task CityChanged(ChangeEventArgs e)
    {
        loading = true;
        centers = await http.GetFromJsonAsync<CommCenterWithReports[]>("CommCenter/ListWithReports?cityId=" + e.Value);

        var colors = new List<string>(centers.Length);
        foreach (var c in centers)
        {
            if (c.ElapsedDaysOfLastPm >= c.PMPeriodDays)
                colors.Add("#f77c88");
            else
                colors.Add("#7cf7a5");
        }

        pmDaysColor = new Dictionary<string, List<string>>
    {{  nameof(CommCenterWithReports.ElapsedDaysOfLastPm) , colors  }};

        loading = false;
    }
}
