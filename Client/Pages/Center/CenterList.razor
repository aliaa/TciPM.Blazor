@page "/"
@page "/center/list"
@attribute [Authorize(nameof(Permission.ShowCenters))]
@inject HttpClientX http

<div class="container">
    @if (cities == null)
    {
        <Loading />
    }
    else
    {
        <div class="row row-cols-lg-auto g-3 align-items-center justify-content-center">
            <div class="form-group col">
                <label>شهر:</label>
                <select class="form-select" @onchange="CityChanged">
                    @if (cities != null)
                    {
                        foreach (var c in cities)
                        {
                            <option value="@c.Value">@c.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="col">
                <a class="btn btn-info ms-3 my-2" href="/center/new">تعریف مرکز جدید</a>
                <button class="btn btn-secondary ms-2 my-2" @onclick="ExcelOutput">خروجی اکسل تجهیزات مراکز</button>
            </div>
        </div>

        if (loading)
        {
            <Loading />
        }
        if (centers != null && !loading)
        {
            <div class="mt-4">
                <ObjectTable Data="centers" FieldNames="fields" LinkColumns="linkColumns" ColumnsBackColor="pmDaysColor" MinWidth="936" />
            </div>
        }
    }
</div>

@code {
    private List<TextValue> cities;
    private CommCenterWithReports[] centers;
    private bool loading = true;

    private static string[] fields = new string[]
    {
        nameof(CommCenterWithReports.CityName),
        nameof(CommCenterWithReports.Name),
        nameof(CommCenterWithReports.ElapsedDaysOfLastPm),
        nameof(CommCenterWithReports.ImportanceLevel),
        nameof(CommCenterWithReports.CenterCapacity),
        nameof(CommCenterWithReports.NotesCount),
        nameof(CommCenterWithReports.EquipmentsPmEnabled),
        nameof(CommCenterWithReports.DailyPmEnabled),
        nameof(CommCenterWithReports.SwitchType),
        nameof(CommCenterWithReports.DieselsCount),
        nameof(CommCenterWithReports.BatteryAndRectifiersCount),
        nameof(CommCenterWithReports.UpsCount),
        nameof(CommCenterWithReports.CompressorCount),
    };

    private static ObjectTable<CommCenterWithReports>.LinkColumn[] linkColumns = new ObjectTable<CommCenterWithReports>.LinkColumn[]
    {
        new ObjectTable<CommCenterWithReports>.LinkColumn { Text = "جزئیات", KeyFieldName = nameof(CommCenterWithReports.Id), Link = @"/center/item/{Id}" },
        new ObjectTable<CommCenterWithReports>.LinkColumn { Text = "ویرایش", KeyFieldName = nameof(CommCenterWithReports.Id), Link = @"/center/edit/{Id}" }
    };

    private Dictionary<string, List<string>> pmDaysColor;

    protected override async Task OnInitializedAsync()
    {
        cities = await http.GetFromJsonAsync<List<TextValue>>("Place/CityList");
        await CityChanged(new ChangeEventArgs { Value = cities[0].Value });
    }

    private async Task CityChanged(ChangeEventArgs e)
    {
        loading = true;
        centers = await http.GetFromJsonAsync<CommCenterWithReports[]>("CommCenter/ListWithReports?cityId=" + e.Value);

        var colors = new List<string>(centers.Length);
        var greenColor = ColorUtils.GetColorOfPercent(100);
        var redColor = ColorUtils.GetColorOfPercent(0);
        foreach (var c in centers)
        {
            if (c.ElapsedDaysOfLastPm >= c.PMPeriodDays)
                colors.Add(redColor);
            else
                colors.Add(greenColor);
        }

    pmDaysColor = new Dictionary<string, List<string>>
    {{  nameof(CommCenterWithReports.ElapsedDaysOfLastPm) , colors  }};

        loading = false;
    }

    private async Task ExcelOutput()
    {
        await http.DownloadFile("CommCenter/ListAsExcelFile");
    }
}
