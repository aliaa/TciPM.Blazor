@page "/equipmentsPm/list"
@inject HttpClientX http

@if (cities == null)
{
    <Loading />
}
else
{
    <div class="container">
        <h3>لیست PM های تجهیزات</h3>

        <EditForm Model="model">
            <div class="mt-5 row">
                <div class="col-lg-3 col-sm-6 form-group">
                    <Label For="@(() => model.City)" />
                    <select @onchange="CityChanged" class="form-control">
                        <option value="">همه</option>
                        @foreach (var c in cities)
                        {
                            <option value="@c.Value">@c.Text</option>
                        }
                    </select>
                </div>
                <div class="col-lg-3 col-sm-6 form-group">
                    <Label For="@(() => model.Center)" />
                    <select @bind="@model.Center" class="form-control">
                        <option value="">همه</option>
                        @if (centers != null)
                        {
                            @foreach (var c in centers)
                            {
                                <option value="@c.Value">@c.Text</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-lg-3 col-sm-6 form-group">
                    <Label For="@(()=> model.FromDate)" />
                    <InputText @bind-Value="model.FromDate" class="form-control pdate" />
                </div>
                <div class="col-lg-3 col-sm-6 form-group">
                    <Label For="@(()=> model.ToDate)" />
                    <InputText @bind-Value="model.ToDate" class="form-control pdate" />
                </div>
                <div class="col-lg-3 col-sm-6 form-group">
                    <Label For="@(() => model.SubmittedUser)" />
                    <select @bind="model.SubmittedUser" class="form-control">
                        <option value="">همه</option>
                        @foreach (var u in users)
                        {
                            <option value="@u.Value">@u.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="mt-4">
                <button class="btn btn-primary" @onclick="ShowResult">نمایش</button>
                <button class="btn btn-secondary mx-3" @onclick="ExcelOutput">خروجی اکسل</button>
            </div>
        </EditForm>
    </div>
    @if (loading)
    {
        <Loading />
    }
    else if (pms != null)
    {
        <div class="container-fluid mt-5">
            <ObjectTable Data="pms" LinkColumns="linkColumns" />
        </div>
    }
}

@code {
    private PmSearchVM model = new PmSearchVM();
    private List<TextValue> cities = null;
    private List<TextValue> centers = null;
    private List<TextValue> users = null;
    private List<EquipmentsPmListItemVM> pms = null;
    private bool loading = false;

    private static ObjectTable<EquipmentsPmListItemVM>.LinkColumn[] linkColumns = new ObjectTable<EquipmentsPmListItemVM>.LinkColumn[]
    {
        new ObjectTable<EquipmentsPmListItemVM>.LinkColumn { Text = "مشاهده", FieldName = nameof(EquipmentsPmListItemVM.Id), Link = @"/equipmentsPm/view/{Id}" }
        };

    protected override async Task OnInitializedAsync()
    {
        var citiesTask = Task.Run(async () =>
        {
            cities = await http.GetFromJsonAsync<List<TextValue>>("Place/CityList");
        });
        var usersTask = Task.Run(async () =>
        {
            users = await http.GetFromJsonAsync<List<TextValue>>("Account/UsersWithPermission?permission=" + Permission.WriteEquipmentPM);
        });
        await Task.WhenAll(citiesTask, usersTask);
    }

    private async Task CityChanged(ChangeEventArgs e)
    {
        model.City = (string)e.Value;
        model.Center = null;
        if (!string.IsNullOrEmpty(model.City))
            centers = await http.GetFromJsonAsync<List<TextValue>>("CommCenter/List?cityId=" + model.City);
        else
            centers = null;
    }

    private async Task ShowResult()
    {
        loading = true;
        pms = await http.PostAsJsonAsync<PmSearchVM, List<EquipmentsPmListItemVM>>("EquipmentsPm/List", model);
        loading = false;
    }

    private async Task ExcelOutput()
    {
        int hash = await http.PostAsJsonAsync<PmSearchVM, int>("EquipmentsPm/RegisterSearch", model);
        await http.DownloadFile("EquipmentsPm/ListAsExcelFile?hash=" + hash);
    }
}
