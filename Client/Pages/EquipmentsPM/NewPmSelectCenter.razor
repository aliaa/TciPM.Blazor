@page "/equipmentsPm/new"

@inject HttpClientX http

<div class="container">
    <h5>لطفا مرکزی را برای ثبت PM انتخاب کنید</h5>
    @if (centers == null)
    {
        <Loading />
    }
    else
    {
        <div class="row mt-4" data-masonry='{"percentPosition": true }'>
            @foreach (var city in centers.GroupBy(c => c.CityName))
            {
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="m-0">
                                @city.Key
                            </h5>
                        </div>
                        <div class="card-body">
                            <table class="table table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th>مرکز</th>
                                        <th>روزهای گذشته از آخرین PM</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var center in city)
                                    {
                                        <tr>
                                            <td style="background-color:@ColorUtils.GetColorOfPercent(center.ElapsedDaysOfLastPm <= center.PMPeriodDays ? 100 : 0)">
                                                <a href="/equipmentsPm/new/@center.Id">@center.Name</a>
                                            </td>
                                            <td style="background-color:@GetColorOfCenter(center);">
                                                @center.ElapsedDaysOfLastPm
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<CenterNameVM> centers;

    protected override async Task OnInitializedAsync()
    {
        centers = await http.GetFromJsonAsync<List<CenterNameVM>>("EquipmentsPm/CentersToPm");
    }

    private string GetColorOfCenter(CenterNameVM center)
    {
        var elapsed = Math.Min(center.PMPeriodDays, center.ElapsedDaysOfLastPm);
        var percent = (int)Math.Round(100.0 * (center.PMPeriodDays - elapsed) / center.PMPeriodDays);
        return ColorUtils.GetColorOfPercent(percent);
    }
}
