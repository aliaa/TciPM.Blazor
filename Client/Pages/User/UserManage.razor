@page "/user/manage"
@attribute [Authorize(nameof(Permission.ManageUsers))]

@inject HttpClientX http
@inject IModalService modal
@inject IToastService toast

@if (users == null)
{
    <Loading />
}
else
{
    <div class="form-inline justify-content-center">
        <div class="form-group">
            <span class="m-2">کاربر:</span>
            <select class="form-control" @onchange="UserChanged">
                <option disabled>انتخاب کنید...</option>
                @foreach (var user in users)
                {
                    <option value="@user.Id.ToString()" selected="@(user.Id == selectedUser?.Id)">@user.DisplayName</option>
                }
            </select>
        </div>
        <button class="btn btn-info mr-3" @onclick="ShowNewUserModal">ایجاد کاربر جدید</button>
    </div>
    @if (selectedUser != null)
    {
        <div class="container mt-5">
            <h3>جزئیات کاربر</h3>
            <EditForm Model="selectedUser" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <div class="row mt-4">
                    <div class="col-lg-3 col-sm-6 form-group">
                        <Label For="@(() => selectedUser.FirstName)"></Label>
                        <InputText @bind-Value="selectedUser.FirstName" class="form-control" />
                    </div>
                    <div class="col-lg-3 col-sm-6 form-group">
                        <Label For="@(() => selectedUser.LastName)"></Label>
                        <InputText @bind-Value="selectedUser.LastName" class="form-control" />
                    </div>
                    <div class="col-lg-3 col-sm-6 form-group">
                        <Label For="@(() => selectedUser.Username)"></Label>
                        <label class="form-control">@selectedUser.Username</label>
                    </div>
                    <div class="col-lg-3 col-sm-6 form-group">
                        <Label For="@(() => selectedUser.RestrictedIP)"></Label>
                        <InputText @bind-Value="selectedUser.RestrictedIP" class="form-control" />
                    </div>
                    <div class="col-lg-3 col-sm-6">
                        <label class="font-weight-bold">اجازه های داده شده</label>
                        <CheckBoxList Data="AllPermissions" TextField="@(item => item.Text)" ValueField="@(item => item.Value)"
                                      SelectedValues="selectedPermissions" ItemWidth="10" />
                    </div>
                    @if (cities != null)
                    {
                        <div class="col-lg-3 col-sm-6">
                            <label class="font-weight-bold">شهر های قابل ثبت PM</label>
                            <CheckBoxList Data="cities" TextField="@(item => item.Text)" ValueField="@(item => item.Value)"
                                          SelectedValues="selectedCities" ChecksChanged="CitiesCheckChanged" ItemWidth="6" />
                        </div>
                    }
                    <div class="col-lg-3 col-sm-6">
                        <label class="font-weight-bold">تجهیزات قابل PM</label>
                        <CheckBoxList Data="AllEquipmentTypes" TextField="@(item => item.Text)" ValueField="@(item => item.Value)"
                                      SelectedValues="selectedEquipmentTypes" />
                    </div>
                    <div class="col-lg-3 col-sm-6">
                        <div class="form-check">
                            <label>
                                <InputCheckbox @bind-Value="selectedUser.Disabled" />
                                    @(UtilsX.DisplayName<ClientAuthUser>(u => u.Disabled))
                            </label>
                        </div>
                        <div class="form-check">
                            <label>
                                <InputCheckbox @bind-Value="selectedUser.IsDailyCenterWorker" />
                                @(UtilsX.DisplayName<ClientAuthUser>(u => u.IsDailyCenterWorker))
                            </label>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <label class="font-weight-bold">مراکز کم ظرفیت</label>
                        <CheckBoxList Data="dailyPmCenters" TextField="@(item => item.Text)" ValueField="@(item => item.Value)"
                                      SelectedValues="selectedDailyPmCenters" ItemWidth="12" />
                    </div>
                </div>
                <div class="mt-4">
                    <input type="submit" class="btn btn-primary" value="ذخیره" />
                </div>
            </EditForm>
        </div>
    }
}

@code {
    private List<ClientAuthUser> users;
    private ClientAuthUser selectedUser;
    private IEnumerable<TextValue> cities;
    private List<TextValue> dailyPmCenters = new List<TextValue>();

    private static readonly List<TextValue> AllPermissions =
        UtilsX.GetEnumValues<Permission>()
        .Select(p => new TextValue { Value = p.ToString(), Text = UtilsX.DisplayName(p) })
        .ToList();

    private List<string> selectedPermissions;
    private List<string> selectedCities;
    private List<string> selectedEquipmentTypes;
    private List<string> selectedDailyPmCenters;

    private static readonly List<TextValue> AllEquipmentTypes =
    UtilsX.GetEnumValues<EquipmentType>()
        .Select(t => new TextValue { Value = t.ToString(), Text = UtilsX.DisplayName(t) })
        .ToList();


    protected override async Task OnInitializedAsync()
    {
        var userLoadTask = LoadUsers();
        var cityLoadTask = Task.Run(async () =>
        {
            var res = await http.GetFromJsonAsync<List<City>>("City/List");
            cities = res.Select(c => new TextValue { Text = c.Name, Value = c.Id.ToString() });
        });
        await Task.WhenAll(userLoadTask, cityLoadTask);
    }

    private async Task LoadUsers()
    {
        users = await http.GetFromJsonAsync<List<ClientAuthUser>>("Account/List");
    }

    private async Task ShowNewUserModal()
    {
        var modalShow = modal.Show<NewUser>("کاربر جدید");
        var result = await modalShow.Result;
        if (!result.Cancelled)
        {
            var user = (NewUserVM)result.Data;
            await LoadUsers();
            selectedUser = users.FirstOrDefault(u => u.Username == user.Username);
            selectedCities = new List<string>();
            selectedDailyPmCenters = new List<string>();
            selectedEquipmentTypes = new List<string>();
            selectedPermissions = new List<string>();
            dailyPmCenters = new List<TextValue>();
        }
    }

    private async Task UserChanged(ChangeEventArgs e)
    {
        selectedUser = users.First(u => u.Id == ObjectId.Parse((string)e.Value));
        selectedPermissions = selectedUser.Permissions.Select(p => p.ToString()).ToList();
        selectedCities = selectedUser.Cities.Select(i => i.ToString()).ToList();
        selectedEquipmentTypes = selectedUser.AllowedEquipmentTypes.Select(t => t.ToString()).ToList();
        selectedDailyPmCenters = selectedUser.AllowedDailyCenters.Select(i => i.ToString()).ToList();
        await CitiesCheckChanged(selectedCities);
    }

    private async Task CitiesCheckChanged(List<string> selectedCities)
    {
        dailyPmCenters = new List<TextValue>();
        foreach (var city in selectedCities)
        {
            var cityName = cities.First(c => c.Value == city).Text;
            var centers = await http.GetFromJsonAsync<List<TextValue>>("CommCenter/DailyCentersList?cityId=" + city);
            foreach (var center in centers)
                center.Text = cityName + " - " + center.Text;
            dailyPmCenters.AddRange(centers);
        }
        if (selectedDailyPmCenters != null)
        {
            foreach (var item in selectedDailyPmCenters.Where(c => !dailyPmCenters.Any(cc => cc.Value == c)).ToList())
                selectedDailyPmCenters.Remove(item);
        }
        StateHasChanged();
    }

    private async Task Save(EditContext context)
    {
        selectedUser.Permissions.Clear();
        selectedUser.AllowedEquipmentTypes.Clear();
        selectedUser.Cities.Clear();
        selectedUser.AllowedDailyCenters.Clear();

        foreach (var item in selectedPermissions)
            selectedUser.Permissions.Add(Enum.Parse<Permission>(item));
        foreach (var item in selectedCities)
            selectedUser.Cities.Add(ObjectId.Parse(item));
        foreach (var item in selectedEquipmentTypes)
            selectedUser.AllowedEquipmentTypes.Add(Enum.Parse<EquipmentType>(item));
        foreach (var item in selectedDailyPmCenters)
            selectedUser.AllowedDailyCenters.Add(ObjectId.Parse(item));

        try
        {
            await http.PostAsJsonAsync<ClientAuthUser>("Account/Save", selectedUser);
            toast.ShowSuccess("کاربر ذخیره شد.");
        }
        catch (HttpClientX.HttpResponseException ex)
        {
            toast.ShowError(ex.Message);
        }
    }
}
