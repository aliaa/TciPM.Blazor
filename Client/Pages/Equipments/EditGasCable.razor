@page "/gasCable/new/{CenterId}"
@page "/gasCable/edit/{Id}"

@inject HttpClientX http


<EditEquipment @ref="editEquipment" Eq="GasCable" CenterId="@CenterId" Id="@Id" TypeDisplayName="کابل هواخور" AfterInitialized="OnAfterInit">
    <div class="row mt-4">
        @if (compressors != null)
        {
            <div class="col-lg-2 col-sm-4">
                <div class="form-group">
                    <Label For="() => model.ConnectedCompressor" />
                    <select class="form-select" @bind="model.ConnectedCompressor">
                        @foreach (var item in compressors)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
            </div>
        }
        <div class="col-lg-2 col-sm-4">
            <div class="form-group">
                <Label For="() => model.Index" />
                <label class="form-control">@model.Index</label>
            </div>
        </div>
        <div class="col-lg-2 col-sm-4">
            <div class="form-group">
                <Label For="() => model.WirePairsCount" />
                <InputNumber class="form-control" @bind-Value="model.WirePairsCount" />
            </div>
        </div>
        <div class="col-lg-2 col-sm-4">
            <div class="form-group">
                <Label For="() => model.WiresDiameter" />
                <InputNumber class="form-control" @bind-Value="model.WiresDiameter" />
            </div>
        </div>
        <div class="col-lg-2 col-sm-4 mt-4 pt-3">
            <div class="form-group form-check">
                <label>
                    <input type="checkbox" @onchange="ToggleHasBranch" class="form-check-input" checked="@(model.Branch != null)" />
                    انشعاب دارد
                </label>
            </div>
        </div>
    </div>
    @if (model.Branch != null)
    {
        <div class="mt-4 card">
            <div class="card-header">محل انشعاب</div>
            <div class="card-body row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="form-label">طول کابل از مبدا تا انشعاب (متر)</label>
                        <InputNumber class="form-control" @bind-Value="model.Branch.Length" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <Label For="() => model.Branch.Address" />
                        <InputText class="form-control" @bind-Value="model.Branch.Address" />
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="card mt-4">
        <div class="card-header">مقصدها</div>
        <div class="card-body">
            <div class="row justify-content-sm-center">
                <div class="col-lg-2 col-sm-4">
                    <label class="form-label">تعداد مقصد</label>
                    <input type="number" value="@model.Destinations.Count" @onchange="DestinationsCountChange" class="form-control"
                           min="@(model.Branch == null ? 1 : 2)" max="@(model.Branch == null ? 1 : 5)" disabled="@(model.Branch == null)" />
                </div>
            </div>
            @{ int i = 0; }
            @foreach (var dest in model.Destinations)
            {
                <div class="card mt-3 mx-3">
                    <div class="card-header">مقصد @(i+1)</div>
                    <div class="card-body row">
                        <div class="col-md-3">
                            <div class="form-group">
                                @if (model.Branch == null)
                                {
                                    <label class="form-label">طول کابل از مبدا تا مقصد</label>
                                }
                                else
                                {
                                    <label class="form-label">طول کابل از محل انشعاب تا مقصد</label>
                                }
                                <InputNumber class="form-control" @bind-Value="dest.Length" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <Label For="() => dest.Address" />
                                <InputText class="form-control" @bind-Value="dest.Address" />
                            </div>
                        </div>
                    </div>
                </div>
                i++;
            }
        </div>
    </div>
</EditEquipment>

@code {
    [Parameter]
    public string CenterId { get; set; }

    [Parameter]
    public string Id { get; set; }

    EditEquipment<GasCable> editEquipment;

    GasCable model => editEquipment.Model;
    List<TextValue> compressors;

    protected async Task OnAfterInit()
    {
        if (Id != null)
        {
            compressors = await http.GetFromJsonAsync<List<TextValue>>($"Equipments/Compressors?centerId={model.Center}");
        }
        else
        {
            compressors = await http.GetFromJsonAsync<List<TextValue>>($"Equipments/Compressors?centerId={CenterId}");
            model.Index = await http.GetFromJsonAsync<int>($"Equipments/GasCableNewIndex?centerId={CenterId}");
            if (compressors != null && compressors.Count > 0)
                model.ConnectedCompressor = compressors[0].Value;
        }
    }

    protected void ToggleHasBranch(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            model.Branch = new GasCable.GasCableDestination();
            if (model.Destinations.Count == 1)
                DestinationsCountChange(2);
        }
        else
        {
            model.Branch = null;
            DestinationsCountChange(1);
        }
    }

    private void DestinationsCountChange(ChangeEventArgs e)
    {
        int count = int.Parse((string)e.Value);
        DestinationsCountChange(count);
    }

    private void DestinationsCountChange(int count)
    {
        while (model.Destinations.Count < count)
            model.Destinations.Add(new GasCable.GasCableDestination());
        while (model.Destinations.Count > count)
            model.Destinations.RemoveAt(model.Destinations.Count - 1);
    }
}