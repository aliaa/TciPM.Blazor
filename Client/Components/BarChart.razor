@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler

<ChartJsBarChart @ref="chart" Config="@config" Width="@Width" Height="@Height" />

@code {
    [Parameter]
    public int Width { get; set; } = 600;
    [Parameter]
    public int Height { get; set; } = 300;
    [Parameter]
    public List<ChartItem> Data { get; set; }

    public class ChartItem
    {
        public string Text { get; set; }
        public double Value { get; set; }
        public string ClickLink { get; set; }
        public string Color { get; set; }
    }

    private BarConfig config;
    private ChartJsBarChart chart;
    private BarDataset<DoubleWrapper> dataset;

    protected override void OnInitialized()
    {
        config = new BarConfig(ChartType.HorizontalBar)
        {
            Options = new BarOptions
            {
                Responsive = true,
                //OnClick = new DotNetInstanceClickHandler(OnClickHandler),
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                AutoSkip = false,
                                Min = 0 // Otherwise the lowest value in the dataset won't be visible
                            }
                        }
                    }
                },
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        config.Data.Labels.AddRange(Data.Select(i => i.Text));

        dataset = new BarDataset<DoubleWrapper>(ChartType.HorizontalBar)
        {
            BackgroundColor = Data.Select(i => i.Color).ToArray()
        };
        dataset.AddRange(Data.Select(i => i.Value).Wrap());
        config.Data.Datasets.Add(dataset);
    }

    @*[JSInvokable]
    public void OnClickHandler(object sender, object args)
    {
        EventArgs += JsonConvert.SerializeObject(JsonConvert.DeserializeObject($"{Environment.NewLine}{args}"), Formatting.Indented);
        Rows = Math.Max(3, EventArgs.Split(new[] { Environment.NewLine }, StringSplitOptions.None).Length + 1);
        StateHasChanged();
    }*@
}
